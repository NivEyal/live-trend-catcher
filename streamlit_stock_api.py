# -*- coding: utf-8 -*-
"""Streamlit Stock Api!

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jlG0wSK6cDZgKd_iOlSYIt5GNpiqtEPm
"""

from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.uix.webview import WebView
from kivy.clock import Clock
import requests
import threading
import json
import time
import urllib.parse  # Import urllib.parse for URL encoding

# API Base URL for Streamlit + FastAPI Backend
API_BASE_URL = "http://localhost:8000"
RETRY_DELAY = 5  # Delay in seconds before retrying a failed API request
REFRESH_INTERVAL = 10  # Auto-refresh interval in seconds

# Define the timeframes you want to display
TIMEFRAMES = {
    "1m": "1",  # TradingView interval codes
    "5m": "5",
    "15m": "15",
    "30m": "30",
    "1h": "60",
}

class StockMonitor(BoxLayout):
    def __init__(self, **kwargs):
        super().__init__(orientation='vertical', **kwargs)

        # AI-Powered Welcome Message
        self.description_label = Label(
            text="🚀 Welcome to Live Trend Catcher! 🚀\nYour AI-powered stock tracking assistant.\n\n📊 Enter a stock symbol and get real-time prices with charts.\n🔄 Prices refresh every 10 seconds. \n🗑 Remove stocks easily with one tap.\n🤖 AI Insights: Get trend analysis based on price changes!",
            size_hint=(1, 0.2),
            halign="center"
        )
        self.add_widget(self.description_label)

        self.stock_symbol_input = TextInput(hint_text='🔎 Enter Stock Symbol', size_hint=(0.7, 0.1))
        self.add_widget(self.stock_symbol_input)

        self.track_button = Button(text='📈 Track 🚀', size_hint=(0.3, 0.1))
        self.track_button.bind(on_press=self.track_stock)
        self.add_widget(self.track_button)

        self.stock_labels = {}  # Store labels for multiple stocks
        self.chart_views = {}   # Store TradingView WebViews (symbol -> webview)
        self.remove_buttons = {}  # Store remove buttons
        self.tracking_symbols = set()
        self.previous_prices = {}  # Store previous prices for AI insights
        self.error_label = Label(text='', size_hint=(1, 0.05), color=(1, 0, 0, 1))
        self.add_widget(self.error_label)

        Clock.schedule_interval(self.auto_refresh_prices, REFRESH_INTERVAL)

    def track_stock(self, instance):
        symbol = self.stock_symbol_input.text.upper().strip()
        if symbol and symbol not in self.tracking_symbols:
            self.tracking_symbols.add(symbol)

            layout = BoxLayout(orientation='horizontal', size_hint=(1, 0.1))
            label = Label(text=f'📊 {symbol}: ⏳ Fetching...', size_hint=(0.6, 1))
            self.stock_labels[symbol] = label
            layout.add_widget(label)

            remove_button = Button(text='🗑', size_hint=(0.2, 1))
            remove_button.bind(on_press=lambda btn, s=symbol: self.remove_stock(s))
            self.remove_buttons[symbol] = remove_button
            layout.add_widget(remove_button)

            self.add_widget(layout)
            threading.Thread(target=self.load_webview, args=(symbol,)).start()
            threading.Thread(target=self.fetch_and_update_price, args=(symbol,)).start()
        else:
            self.error_label.text = '⚠️ Please enter a valid stock symbol or avoid duplicates.'

    def fetch_and_update_price(self, symbol):
        price = self.fetch_stock_price_from_api(symbol)
        self.generate_ai_insight(symbol, price)
        Clock.schedule_once(lambda dt: self.update_label(symbol, price))

    def generate_ai_insight(self, symbol, price):
        if symbol in self.previous_prices:
            prev_price = self.previous_prices[symbol]
            if price > prev_price:
                insight = "🚀 Trending Up! Buyers are active!"
            elif price < prev_price:
                insight = "📉 Trending Down! Market may be cooling."
            else:
                insight = "⚖️ No significant change. Market is stable."
        else:
            insight = "📊 Monitoring price movement..."

        self.previous_prices[symbol] = price
        Clock.schedule_once(lambda dt: self.update_ai_insight(symbol, insight))

    def update_ai_insight(self, symbol, insight):
        if symbol in self.stock_labels:
            self.stock_labels[symbol].text += f"\n🤖 {insight}"

    def auto_refresh_prices(self, dt):
        for symbol in self.tracking_symbols:
            threading.Thread(target=self.fetch_and_update_price, args=(symbol,)).start()

class LiveTrendCatcherApp(App):
    def build(self):
        return StockMonitor()

if __name__ == '__main__':
    LiveTrendCatcherApp().run()